{"version":3,"file":"static/webpack/static/development/pages/_app.js.318ecb8ccb073b23b07e.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import App, {Container} from 'next/app'\nimport { ApolloProvider } from 'react-apollo'\nimport ErrorPage from 'next/error'\nimport withApollo from '../utils/withApollo'\nimport 'isomorphic-fetch';\nimport redirectTo from '../utils/redirectTo'\nimport { hasSignedIn } from '../utils/requireSignedin'\n\n\nclass MyApp extends App {\n\n  static async getInitialProps({ Component, router, ctx }) {\n\n    let pageProps = {}\n    let whitelist = [\n      '/',\n      '/login',\n      '/register',\n    ]\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    if (pageProps.statusCode && ctx.res) {\n      ctx.res.statusCode = pageProps.statusCode\n    }\n\n    if (!(await hasSignedIn(ctx))) {\n      if (! whitelist.includes(ctx.pathname))\n      redirectTo('/login', { res: ctx.res, status: 301 })\n    }\n\n    return { pageProps }\n  }\n\n  render () {\n    const {Component, pageProps, apollo, statusCode } = this.props\n    if (statusCode) {\n      return <ErrorPage statusCode={statusCode} />\n    }\n    return(\n      <Container>\n        <ApolloProvider client={apollo}>\n          <Component {...pageProps} />\n        </ApolloProvider>\n      </Container>\n    )\n  }\n}\n\nexport default withApollo(MyApp)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;AArCA;AAEA;AACA;AACA;AAKA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;;;;;;;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAzBA;AACA;AAyCA;;;;A","sourceRoot":""}